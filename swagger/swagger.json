{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API\n",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/accounts/": {
            "get": {
                "tags": [
                    "accounts"
                ],
                "description": "get Accounts\n\u003cbr\u003e",
                "operationId": "AccountsController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Accounts"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "accounts"
                ],
                "description": "create Accounts\n\u003cbr\u003e",
                "operationId": "AccountsController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Accounts content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateAccountRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Accounts"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/accounts/{id}": {
            "get": {
                "tags": [
                    "accounts"
                ],
                "description": "get Accounts by id\n\u003cbr\u003e",
                "operationId": "AccountsController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Accounts"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "accounts"
                ],
                "description": "update the Accounts\n\u003cbr\u003e",
                "operationId": "AccountsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Accounts content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Accounts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Accounts"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "accounts"
                ],
                "description": "delete the Accounts\n\u003cbr\u003e",
                "operationId": "AccountsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/customer-categories/": {
            "get": {
                "tags": [
                    "customer-categories"
                ],
                "description": "get Customer_categories\n\u003cbr\u003e",
                "operationId": "Customer_categoriesController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Customer_categories"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "customer-categories"
                ],
                "description": "create Customer_categories\n\u003cbr\u003e",
                "operationId": "Customer_categoriesController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Customer_categories content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomerCategoriesRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.CustomerCategoriesResponseDTO"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/customer-categories/{id}": {
            "get": {
                "tags": [
                    "customer-categories"
                ],
                "description": "get Customer_categories by id\n\u003cbr\u003e",
                "operationId": "Customer_categoriesController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Customer_categories"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "customer-categories"
                ],
                "description": "update the Customer_categories\n\u003cbr\u003e",
                "operationId": "Customer_categoriesController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Customer_categories content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Customer_categories"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Customer_categories"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "customer-categories"
                ],
                "description": "delete the Customer_categories\n\u003cbr\u003e",
                "operationId": "Customer_categoriesController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/customers/": {
            "get": {
                "tags": [
                    "customers"
                ],
                "description": "get Customers\n\u003cbr\u003e",
                "operationId": "CustomersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Customers"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            }
        },
        "/customers/add-customer": {
            "post": {
                "tags": [
                    "customers"
                ],
                "description": "Add customer\n\u003cbr\u003e",
                "operationId": "CustomersController.AddCustomer",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for add customer content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AddCustomerRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerResponseDTO"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],
                "description": "get Customers by id\n\u003cbr\u003e",
                "operationId": "CustomersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Customers"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "customers"
                ],
                "description": "update the Customers\n\u003cbr\u003e",
                "operationId": "CustomersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Customers content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Customers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Customers"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "description": "delete the Customers\n\u003cbr\u003e",
                "operationId": "CustomersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/newsletter/": {
            "get": {
                "tags": [
                    "newsletter"
                ],
                "description": "get Newsletter_customers\n\u003cbr\u003e",
                "operationId": "Newsletter_customersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Newsletter_customers"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "newsletter"
                ],
                "description": "create Newsletter_customers\n\u003cbr\u003e",
                "operationId": "Newsletter_customersController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Newsletter_customers content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.NewsletterRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Newsletter_customers"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/newsletter/{id}": {
            "get": {
                "tags": [
                    "newsletter"
                ],
                "description": "get Newsletter_customers by id\n\u003cbr\u003e",
                "operationId": "Newsletter_customersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Newsletter_customers"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "newsletter"
                ],
                "description": "update the Newsletter_customers\n\u003cbr\u003e",
                "operationId": "Newsletter_customersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Newsletter_customers content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Newsletter_customers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Newsletter_customers"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "newsletter"
                ],
                "description": "delete the Newsletter_customers\n\u003cbr\u003e",
                "operationId": "Newsletter_customersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users\n\u003cbr\u003e",
                "operationId": "UsersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            }
        },
        "/users/2/sign-up": {
            "post": {
                "tags": [
                    "users"
                ],
                "description": "Sign up\n\u003cbr\u003e",
                "operationId": "UsersController.SignUp2",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SignUp content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCredentialsDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponseDTO"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/users/get-user-by-username/{username}": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "Verify Users by username\n\u003cbr\u003e",
                "operationId": "UsersController.Verify User by username",
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponseDTO"
                        }
                    },
                    "403": {
                        "description": ":username is empty"
                    }
                }
            }
        },
        "/users/sign-up": {
            "post": {
                "tags": [
                    "users"
                ],
                "description": "Sign up\n\u003cbr\u003e",
                "operationId": "UsersController.SignUp",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SignUp content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignUpDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponseDTO"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/users/verify-user/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "Verify Users by userid\n\u003cbr\u003e",
                "operationId": "UsersController.Verify User by userid",
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponseDTO"
                        }
                    },
                    "403": {
                        "description": ":username is empty"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users by id\n\u003cbr\u003e",
                "operationId": "UsersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "description": "update the Users\n\u003cbr\u003e",
                "operationId": "UsersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Users content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponseDTO"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "description": "delete the Users\n\u003cbr\u003e",
                "operationId": "UsersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Accounts": {
            "title": "Accounts",
            "type": "object",
            "properties": {
                "AccountId": {
                    "type": "integer",
                    "format": "int64"
                },
                "AccountNumber": {
                    "type": "string"
                },
                "Active": {
                    "type": "integer",
                    "format": "int64"
                },
                "Balance": {
                    "type": "number",
                    "format": "double"
                },
                "BalanceBefore": {
                    "type": "number",
                    "format": "double"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "DateCreated": {
                    "type": "string",
                    "format": "datetime"
                },
                "DateModified": {
                    "type": "string",
                    "format": "datetime"
                },
                "ModifiedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "UserId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.CustomerCategoriesRequestDTO": {
            "title": "CustomerCategoriesRequestDTO",
            "type": "object",
            "properties": {
                "Category": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "models.CustomerResponseDTO": {
            "title": "CustomerResponseDTO",
            "type": "object",
            "properties": {
                "Customer": {
                    "$ref": "#/definitions/models.Customers"
                },
                "StatusCode": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusDesc": {
                    "type": "string"
                }
            }
        },
        "models.Customer_categories": {
            "title": "Customer_categories",
            "type": "object",
            "properties": {
                "Active": {
                    "type": "integer",
                    "format": "int64"
                },
                "Category": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "CustomerCategoryId": {
                    "type": "integer",
                    "format": "int64"
                },
                "DateCreated": {
                    "type": "string",
                    "format": "datetime"
                },
                "DateModified": {
                    "type": "string",
                    "format": "datetime"
                },
                "Description": {
                    "type": "string"
                },
                "ModifiedBy": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Customers": {
            "title": "Customers",
            "type": "object",
            "properties": {
                "Active": {
                    "type": "integer",
                    "format": "int64"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "CustomerCategory": {
                    "$ref": "#/definitions/models.Customer_categories"
                },
                "CustomerId": {
                    "type": "integer",
                    "format": "int64"
                },
                "DateCreated": {
                    "type": "string",
                    "format": "datetime"
                },
                "DateModified": {
                    "type": "string",
                    "format": "datetime"
                },
                "ModifiedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nickname": {
                    "type": "string"
                },
                "Shop": {
                    "$ref": "#/definitions/models.Shops"
                },
                "User": {
                    "$ref": "#/definitions/models.Users"
                }
            }
        },
        "models.Newsletter_customers": {
            "title": "Newsletter_customers",
            "type": "object",
            "properties": {
                "Active": {
                    "type": "integer",
                    "format": "int64"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "CustomerId": {
                    "type": "integer",
                    "format": "int64"
                },
                "DateCreated": {
                    "type": "string",
                    "format": "datetime"
                },
                "DateModified": {
                    "type": "string",
                    "format": "datetime"
                },
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "ModifiedBy": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Shops": {
            "title": "Shops",
            "type": "object",
            "properties": {
                "Active": {
                    "type": "integer",
                    "format": "int64"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "DateCreated": {
                    "type": "string",
                    "format": "datetime"
                },
                "DateModified": {
                    "type": "string",
                    "format": "datetime"
                },
                "Image": {
                    "type": "string"
                },
                "ModifiedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "ShopAssistantName": {
                    "type": "string"
                },
                "ShopAssistantNumber": {
                    "type": "string"
                },
                "ShopDescription": {
                    "type": "string"
                },
                "ShopId": {
                    "type": "integer",
                    "format": "int64"
                },
                "ShopName": {
                    "type": "string"
                }
            }
        },
        "models.SignUpDTO": {
            "title": "SignUpDTO",
            "type": "object",
            "properties": {
                "Dob": {
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "Gender": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "PhoneNumber": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRequestDTO": {
            "title": "UpdateUserRequestDTO",
            "type": "object",
            "properties": {
                "Address": {
                    "type": "string"
                },
                "Dob": {
                    "type": "string"
                },
                "FullName": {
                    "type": "string"
                },
                "Gender": {
                    "type": "string"
                },
                "MaritalStatus": {
                    "type": "string"
                },
                "PhoneNumber": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "models.UserCredentialsDTO": {
            "title": "UserCredentialsDTO",
            "type": "object",
            "properties": {
                "Password": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "models.UserResponseDTO": {
            "title": "UserResponseDTO",
            "type": "object",
            "properties": {
                "StatusCode": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusDesc": {
                    "type": "string"
                },
                "User": {
                    "$ref": "#/definitions/models.Users"
                }
            }
        },
        "models.UserTypes": {
            "title": "UserTypes",
            "type": "object",
            "properties": {
                "Active": {
                    "type": "integer",
                    "format": "int64"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "DateCreated": {
                    "type": "string",
                    "format": "datetime"
                },
                "DateModified": {
                    "type": "string",
                    "format": "datetime"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ModifiedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "UserTypeDescription": {
                    "type": "string"
                },
                "UserTypeName": {
                    "type": "string"
                }
            }
        },
        "models.Users": {
            "title": "Users",
            "type": "object",
            "properties": {
                "Active": {
                    "type": "integer",
                    "format": "int64"
                },
                "Address": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "DateCreated": {
                    "type": "string",
                    "format": "datetime"
                },
                "DateModified": {
                    "type": "string",
                    "format": "datetime"
                },
                "Dob": {
                    "type": "string",
                    "format": "datetime"
                },
                "Email": {
                    "type": "string"
                },
                "FullName": {
                    "type": "string"
                },
                "Gender": {
                    "type": "string"
                },
                "IdNumber": {
                    "type": "string"
                },
                "IdType": {
                    "type": "string"
                },
                "ImagePath": {
                    "type": "string"
                },
                "IsVerified": {
                    "type": "boolean"
                },
                "MaritalStatus": {
                    "type": "string"
                },
                "ModifiedBy": {
                    "type": "integer",
                    "format": "int64"
                },
                "Password": {
                    "type": "string"
                },
                "PhoneNumber": {
                    "type": "string"
                },
                "UserId": {
                    "type": "integer",
                    "format": "int64"
                },
                "UserType": {
                    "type": "integer",
                    "format": "int64"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "requests.AddCustomerRequestDTO": {
            "title": "AddCustomerRequestDTO",
            "type": "object",
            "properties": {
                "AddedBy": {
                    "type": "string"
                },
                "Category": {
                    "type": "string"
                },
                "Dob": {
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "Gender": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Nickname": {
                    "type": "string"
                },
                "PhoneNumber": {
                    "type": "string"
                },
                "ShopAssistantName": {
                    "type": "string"
                },
                "ShopAssistantNumber": {
                    "type": "string"
                },
                "ShopName": {
                    "type": "string"
                }
            }
        },
        "requests.CreateAccountRequestDTO": {
            "title": "CreateAccountRequestDTO",
            "type": "object",
            "properties": {
                "UserId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "requests.NewsletterRequestDTO": {
            "title": "NewsletterRequestDTO",
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "users",
            "description": "UsersController operations for Users\n"
        },
        {
            "name": "customer-categories",
            "description": "Customer_categoriesController operations for Customer_categories\n"
        },
        {
            "name": "customers",
            "description": "CustomersController operations for Customers\n"
        },
        {
            "name": "accounts",
            "description": "AccountsController operations for Accounts\n"
        },
        {
            "name": "newsletter",
            "description": "Newsletter_customersController operations for Newsletter_customers\n"
        }
    ]
}