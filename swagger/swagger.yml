swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /accounts/:
    get:
      tags:
      - accounts
      description: |-
        get Accounts
        <br>
      operationId: AccountsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Accounts'
        "403":
          description: ""
    post:
      tags:
      - accounts
      description: |-
        create Accounts
        <br>
      operationId: AccountsController.Post
      parameters:
      - in: body
        name: body
        description: body for Accounts content
        required: true
        schema:
          $ref: '#/definitions/requests.CreateAccountRequestDTO'
      responses:
        "201":
          description: '{int} models.Accounts'
        "403":
          description: body is empty
  /accounts/{id}:
    get:
      tags:
      - accounts
      description: |-
        get Accounts by id
        <br>
      operationId: AccountsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Accounts'
        "403":
          description: :id is empty
    put:
      tags:
      - accounts
      description: |-
        update the Accounts
        <br>
      operationId: AccountsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Accounts content
        required: true
        schema:
          $ref: '#/definitions/models.Accounts'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Accounts'
        "403":
          description: :id is not int
    delete:
      tags:
      - accounts
      description: |-
        delete the Accounts
        <br>
      operationId: AccountsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /customer-categories/:
    get:
      tags:
      - customer-categories
      description: |-
        get Customer_categories
        <br>
      operationId: Customer_categoriesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Customer_categories'
        "403":
          description: ""
    post:
      tags:
      - customer-categories
      description: |-
        create Customer_categories
        <br>
      operationId: Customer_categoriesController.Post
      parameters:
      - in: body
        name: body
        description: body for Customer_categories content
        required: true
        schema:
          $ref: '#/definitions/models.CustomerCategoriesRequestDTO'
      responses:
        "200":
          description: '{int} models.CustomerCategoriesResponseDTO'
        "403":
          description: body is empty
  /customer-categories/{id}:
    get:
      tags:
      - customer-categories
      description: |-
        get Customer_categories by id
        <br>
      operationId: Customer_categoriesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Customer_categories'
        "403":
          description: :id is empty
    put:
      tags:
      - customer-categories
      description: |-
        update the Customer_categories
        <br>
      operationId: Customer_categoriesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Customer_categories content
        required: true
        schema:
          $ref: '#/definitions/models.Customer_categories'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Customer_categories'
        "403":
          description: :id is not int
    delete:
      tags:
      - customer-categories
      description: |-
        delete the Customer_categories
        <br>
      operationId: Customer_categoriesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /customers/:
    get:
      tags:
      - customers
      description: |-
        get Customers
        <br>
      operationId: CustomersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. Tony ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Customers'
        "403":
          description: ""
  /customers/{id}:
    get:
      tags:
      - customers
      description: |-
        get Customers by id
        <br>
      operationId: CustomersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Customers'
        "403":
          description: :id is empty
    put:
      tags:
      - customers
      description: |-
        update the Customers
        <br>
      operationId: CustomersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Customers content
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCustomerRequestDTO'
      - in: formData
        name: CustomerImage
        description: Customer Image
        required: true
        type: file
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.CustomerResponseDTO'
        "403":
          description: :id is not int
    delete:
      tags:
      - customers
      description: |-
        delete the Customers
        <br>
      operationId: CustomersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /customers/add-customer:
    post:
      tags:
      - customers
      description: |-
        Add customer
        <br>
      operationId: CustomersController.AddCustomer
      parameters:
      - in: body
        name: body
        description: body for add customer content
        required: true
        schema:
          $ref: '#/definitions/requests.AddCustomerRequestDTO'
      - in: formData
        name: CustomerImage
        description: Customer Image
        required: true
        type: file
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.CustomerResponseDTO'
        "403":
          description: body is empty
  /customers/branch/{id}:
    get:
      tags:
      - customers
      description: |-
        get Customers By Branch
        <br>
      operationId: CustomersController.Get All By Branch
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Customers'
        "403":
          description: ""
  /customers/count/:
    get:
      tags:
      - customers
      description: |-
        get count of customers
        <br>
      operationId: CustomersController.Get Customer Count
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. Toby ...
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: :id is empty
  /customers/last-txn/{id}:
    put:
      tags:
      - customers
      description: |-
        update the Customer's least txn dat
        <br>
      operationId: CustomersController.Update Customer's last txn date
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Customers content
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCustomerLastTxnRequest'
      - in: formData
        name: CustomerImage
        description: Customer Image
        required: true
        type: file
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.CustomerResponseDTO'
        "403":
          description: :id is not int
  /customers/update-customer-image:
    post:
      tags:
      - customers
      description: |-
        update the customer's profile image
        <br>
      operationId: CustomersController.Update customer's profile image
      parameters:
      - in: formData
        name: CustomerImage
        description: Customer Image
        required: true
        type: file
      - in: formData
        name: CustomerId
        description: Customer ID
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: body is empty
  /id-types/:
    get:
      tags:
      - id-types
      description: |-
        get Identification_types
        <br>
      operationId: Identification_typesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Identification_types'
        "403":
          description: ""
    post:
      tags:
      - id-types
      description: |-
        create Identification_types
        <br>
      operationId: Identification_typesController.Post
      parameters:
      - in: body
        name: body
        description: body for Identification_types content
        required: true
        schema:
          $ref: '#/definitions/models.Identification_types'
      responses:
        "201":
          description: '{int} models.Identification_types'
        "403":
          description: body is empty
  /id-types/{id}:
    get:
      tags:
      - id-types
      description: |-
        get Identification_types by id
        <br>
      operationId: Identification_typesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Identification_types'
        "403":
          description: :id is empty
    put:
      tags:
      - id-types
      description: |-
        update the Identification_types
        <br>
      operationId: Identification_typesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Identification_types content
        required: true
        schema:
          $ref: '#/definitions/models.Identification_types'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Identification_types'
        "403":
          description: :id is not int
    delete:
      tags:
      - id-types
      description: |-
        delete the Identification_types
        <br>
      operationId: Identification_typesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /newsletter/:
    get:
      tags:
      - newsletter
      description: |-
        get Newsletter_customers
        <br>
      operationId: Newsletter_customersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Newsletter_customers'
        "403":
          description: ""
    post:
      tags:
      - newsletter
      description: |-
        create Newsletter_customers
        <br>
      operationId: Newsletter_customersController.Post
      parameters:
      - in: body
        name: body
        description: body for Newsletter_customers content
        required: true
        schema:
          $ref: '#/definitions/requests.NewsletterRequestDTO'
      responses:
        "201":
          description: '{int} models.Newsletter_customers'
        "403":
          description: body is empty
  /newsletter/{id}:
    get:
      tags:
      - newsletter
      description: |-
        get Newsletter_customers by id
        <br>
      operationId: Newsletter_customersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Newsletter_customers'
        "403":
          description: :id is empty
    put:
      tags:
      - newsletter
      description: |-
        update the Newsletter_customers
        <br>
      operationId: Newsletter_customersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Newsletter_customers content
        required: true
        schema:
          $ref: '#/definitions/models.Newsletter_customers'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Newsletter_customers'
        "403":
          description: :id is not int
    delete:
      tags:
      - newsletter
      description: |-
        delete the Newsletter_customers
        <br>
      operationId: Newsletter_customersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /permissions/:
    get:
      tags:
      - permissions
      description: |-
        get Permissions
        <br>
      operationId: PermissionsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.PermissionsAllResponseDTO'
        "403":
          description: ""
    post:
      tags:
      - permissions
      description: |-
        create Permissions
        <br>
      operationId: PermissionsController.Post
      parameters:
      - in: body
        name: body
        description: body for Permissions content
        required: true
        schema:
          $ref: '#/definitions/requests.PermissionRequest'
      responses:
        "200":
          description: '{int} responses.PermissionResponseDTO'
        "403":
          description: body is empty
  /permissions/{id}:
    get:
      tags:
      - permissions
      description: |-
        get Permissions by id
        <br>
      operationId: PermissionsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.PermissionResponseDTO'
        "403":
          description: :id is empty
    put:
      tags:
      - permissions
      description: |-
        update the Permissions
        <br>
      operationId: PermissionsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Permissions content
        required: true
        schema:
          $ref: '#/definitions/models.Permissions'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Permissions'
        "403":
          description: :id is not int
    delete:
      tags:
      - permissions
      description: |-
        delete the Permissions
        <br>
      operationId: PermissionsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /role-permissions/:
    get:
      tags:
      - role-permissions
      description: |-
        get Role_permissions
        <br>
      operationId: Role_permissionsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Role_permissions'
        "403":
          description: ""
    post:
      tags:
      - role-permissions
      description: |-
        create Role_permissions
        <br>
      operationId: Role_permissionsController.Post
      parameters:
      - in: body
        name: body
        description: body for Role_permissions content
        required: true
        schema:
          $ref: '#/definitions/requests.RolePermissionRequest'
      responses:
        "200":
          description: '{int} responses.RolePermissionResponseDTO'
        "403":
          description: body is empty
  /role-permissions/{id}:
    get:
      tags:
      - role-permissions
      description: |-
        get Role_permissions by id
        <br>
      operationId: Role_permissionsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Role_permissions'
        "403":
          description: :id is empty
    put:
      tags:
      - role-permissions
      description: |-
        update the Role_permissions
        <br>
      operationId: Role_permissionsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Role_permissions content
        required: true
        schema:
          $ref: '#/definitions/models.Role_permissions'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Role_permissions'
        "403":
          description: :id is not int
    delete:
      tags:
      - role-permissions
      description: |-
        delete the Role_permissions
        <br>
      operationId: Role_permissionsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /roles/:
    get:
      tags:
      - roles
      description: |-
        get Roles
        <br>
      operationId: RolesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.RolesAllResponseDTO'
        "403":
          description: ""
    post:
      tags:
      - roles
      description: |-
        create Roles
        <br>
      operationId: RolesController.Post
      parameters:
      - in: body
        name: body
        description: body for Roles content
        required: true
        schema:
          $ref: '#/definitions/requests.RolesRequest'
      responses:
        "200":
          description: '{int} responses.RoleResponseDTO'
        "403":
          description: body is empty
  /roles/{id}:
    get:
      tags:
      - roles
      description: |-
        get Roles by id
        <br>
      operationId: RolesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.RoleResponseDTO'
        "403":
          description: :id is empty
    put:
      tags:
      - roles
      description: |-
        update the Roles
        <br>
      operationId: RolesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Roles content
        required: true
        schema:
          $ref: '#/definitions/models.Roles'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Roles'
        "403":
          description: :id is not int
    delete:
      tags:
      - roles
      description: |-
        delete the Roles
        <br>
      operationId: RolesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /roles/role/{role}:
    get:
      tags:
      - roles
      description: |-
        get Roles by name
        <br>
      operationId: RolesController.Get One By Role
      parameters:
      - in: path
        name: role
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.RoleResponseDTO'
        "403":
          description: :name is empty
  /shops/:
    get:
      tags:
      - shops
      description: |-
        get Shops
        <br>
      operationId: ShopsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Shops'
        "403":
          description: ""
    post:
      tags:
      - shops
      description: |-
        create Shops
        <br>
      operationId: ShopsController.Post
      parameters:
      - in: body
        name: body
        description: body for Shops content
        required: true
        schema:
          $ref: '#/definitions/models.Shops'
      responses:
        "201":
          description: '{int} models.Shops'
        "403":
          description: body is empty
  /shops/{id}:
    get:
      tags:
      - shops
      description: |-
        get Shops by id
        <br>
      operationId: ShopsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Shops'
        "403":
          description: :id is empty
    put:
      tags:
      - shops
      description: |-
        update the Shops
        <br>
      operationId: ShopsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Shops content
        required: true
        schema:
          $ref: '#/definitions/requests.ShopRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Shops'
        "403":
          description: :id is not int
    delete:
      tags:
      - shops
      description: |-
        delete the Shops
        <br>
      operationId: ShopsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /shops/branches:
    get:
      tags:
      - shops
      description: |-
        get Branches
        <br>
      operationId: ShopsController.Get All Branches
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.BranchesResponseDTO'
        "403":
          description: ""
  /shops/upload-shop-logo:
    post:
      tags:
      - shops
      description: |-
        Upload shop's logo
        <br>
      operationId: ShopsController.Upload Shop Logo
      parameters:
      - in: formData
        name: Image
        description: Item Image
        required: true
        type: file
      responses:
        "200":
          description: '{int} responses.StringResponseFDTO'
        "403":
          description: body is empty
  /users/:
    get:
      tags:
      - users
      description: |-
        get Users
        <br>
      operationId: UsersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: ""
  /users/{id}:
    get:
      tags:
      - users
      description: |-
        get Users by id
        <br>
      operationId: UsersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is empty
    put:
      tags:
      - users
      description: |-
        update the Users
        <br>
      operationId: UsersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: formData
        name: UserImage
        description: User Image
        required: true
        type: file
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: :id is not int
    delete:
      tags:
      - users
      description: |-
        delete the Users
        <br>
      operationId: UsersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /users/2/sign-up:
    post:
      tags:
      - users
      description: |-
        Sign up
        <br>
      operationId: UsersController.SignUp2
      parameters:
      - in: body
        name: body
        description: body for SignUp content
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentialsDTO'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: body is empty
  /users/branch/{branch_id}:
    get:
      tags:
      - users
      description: |-
        get Users under a branch
        <br>
      operationId: UsersController.Get All Users under branch
      parameters:
      - in: path
        name: branch_id
        description: The key for staticblock
        required: true
        type: string
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.UsersAllCustomersDTO'
        "403":
          description: ""
  /users/branch/{id}:
    put:
      tags:
      - users
      description: |-
        update the Users branch
        <br>
      operationId: UsersController.Update User Branch
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserBranchRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.UserResponseDTO'
        "403":
          description: :id is not int
  /users/count/:
    get:
      tags:
      - users
      description: |-
        get Item_quantity by Item id
        <br>
      operationId: UsersController.Get Item Quantity
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: :id is empty
  /users/deactivate/{id}:
    delete:
      tags:
      - users
      description: |-
        delete the Users
        <br>
      operationId: UsersController.Deactivate
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /users/get-user-by-username/{username}:
    get:
      tags:
      - users
      description: |-
        Verify Users by username
        <br>
      operationId: UsersController.Verify User by username
      parameters:
      - in: path
        name: username
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: :username is empty
  /users/get-user-invites:
    get:
      tags:
      - users
      description: |-
        get Users
        <br>
      operationId: UsersController.Get User Invites
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. example@gmail.com ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.UserInvitesResponseDTO'
        "403":
          description: ""
  /users/invite-user:
    post:
      tags:
      - users
      description: |-
        Invite user using email
        <br>
      operationId: UsersController.Invite user
      parameters:
      - in: body
        name: body
        description: body for SignUp content
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterInviteRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: body is empty
  /users/invite/{id}:
    get:
      tags:
      - users
      description: |-
        get User Invite by id
        <br>
      operationId: UsersController.Get Invite
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is empty
  /users/revoke-invite:
    post:
      tags:
      - users
      description: |-
        Revoke invite
        <br>
      operationId: UsersController.Revoke invite
      parameters:
      - in: body
        name: body
        description: body for SignUp content
        required: true
        schema:
          $ref: '#/definitions/requests.StringRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.InviteDecodeResponseDTO'
        "403":
          description: body is empty
  /users/role/{id}:
    put:
      tags:
      - users
      description: |-
        update the Users
        <br>
      operationId: UsersController.Update User Role
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: :id is not int
  /users/role/{role_id}:
    get:
      tags:
      - users
      description: |-
        get Users with a role Id
        <br>
      operationId: UsersController.Get All Users with role Id
      parameters:
      - in: path
        name: role_id
        description: The key for staticblock
        required: true
        type: string
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.UsersAllCustomersDTO'
        "403":
          description: ""
  /users/sign-up:
    post:
      tags:
      - users
      description: |-
        Sign up
        <br>
      operationId: UsersController.SignUp
      parameters:
      - in: body
        name: body
        description: body for SignUp content
        required: true
        schema:
          $ref: '#/definitions/models.SignUpDTO'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: body is empty
  /users/update-user-image:
    post:
      tags:
      - users
      description: |-
        update the User's profile image
        <br>
      operationId: UsersController.Update user's profile image
      parameters:
      - in: formData
        name: UserImage
        description: User Image
        required: true
        type: file
      - in: formData
        name: UserId
        description: User ID
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: body is empty
  /users/update-user-invite/{id}:
    put:
      tags:
      - users
      description: |-
        update the Users
        <br>
      operationId: UsersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserInviteRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.UserInvitesResponseDTO'
        "403":
          description: :id is not int
  /users/user-invite/{token}:
    get:
      tags:
      - users
      description: |-
        get User invite by token
        <br>
      operationId: UsersController.Get One User Invite
      parameters:
      - in: path
        name: token
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.UserInviteResponseDTO'
        "403":
          description: :token is empty
  /users/verify-invite:
    post:
      tags:
      - users
      description: |-
        Verify invite
        <br>
      operationId: UsersController.Verify invite
      parameters:
      - in: body
        name: body
        description: body for SignUp content
        required: true
        schema:
          $ref: '#/definitions/requests.StringRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.InviteDecodeResponseDTO'
        "403":
          description: body is empty
  /users/verify-user/{id}:
    get:
      tags:
      - users
      description: |-
        Verify Users by userid
        <br>
      operationId: UsersController.Verify User by userid
      parameters:
      - in: path
        name: username
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "403":
          description: :username is empty
definitions:
  494.<nil>.0x140008cfb30:
    title: "0x140008cfb30"
    type: object
  1380.<nil>.0x140008cfcf8:
    title: "0x140008cfcf8"
    type: object
  2278.<nil>.0x140008cfef0:
    title: "0x140008cfef0"
    type: object
  3081.<nil>.0x14000920120:
    title: "0x14000920120"
    type: object
  4454.<nil>.0x14000920360:
    title: "0x14000920360"
    type: object
  models.Accounts:
    title: Accounts
    type: object
    properties:
      AccountId:
        type: integer
        format: int64
      AccountNumber:
        type: string
      Active:
        type: integer
        format: int64
      Balance:
        type: number
        format: double
      BalanceBefore:
        type: number
        format: double
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      UserId:
        type: integer
        format: int64
  models.Actions:
    title: Actions
    type: object
    properties:
      Action:
        type: string
      ActionId:
        type: integer
        format: int64
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Description:
        type: string
      ModifiedBy:
        type: integer
        format: int64
  models.Branches:
    title: Branches
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Branch:
        type: string
      BranchId:
        type: integer
        format: int64
      Country:
        $ref: '#/definitions/models.Countries'
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Location:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      PhoneNumber:
        type: string
  models.Countries:
    title: Countries
    type: object
    properties:
      Country:
        type: string
      CountryCode:
        type: string
      CountryId:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      DefaultCurrency:
        $ref: '#/definitions/models.Currencies'
      Description:
        type: string
      ModifiedBy:
        type: integer
        format: int64
  models.Currencies:
    title: Currencies
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      Currency:
        type: string
      CurrencyId:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Symbol:
        type: string
  models.Customer_categories:
    title: Customer_categories
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Category:
        type: string
      CreatedBy:
        type: integer
        format: int64
      CustomerCategoryId:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Description:
        type: string
      ModifiedBy:
        type: integer
        format: int64
  models.CustomerCategoriesRequestDTO:
    title: CustomerCategoriesRequestDTO
    type: object
    properties:
      Category:
        type: string
      CreatedBy:
        type: integer
        format: int64
      Description:
        type: string
  models.CustomerResponseDTO:
    title: CustomerResponseDTO
    type: object
    properties:
      Customer:
        $ref: '#/definitions/models.Customers'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  models.Customers:
    title: Customers
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Branch:
        $ref: '#/definitions/models.Branches'
      CreatedBy:
        type: integer
        format: int64
      CustomerCategory:
        $ref: '#/definitions/models.Customer_categories'
      CustomerId:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Dob:
        type: string
        format: datetime
      Email:
        type: string
      FullName:
        type: string
      IdentificationNumber:
        type: string
      IdentificationType:
        $ref: '#/definitions/models.Identification_types'
      ImagePath:
        type: string
      LastTxnDate:
        type: string
        format: datetime
      Location:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Nickname:
        type: string
      PhoneNumber:
        type: string
      Shop:
        $ref: '#/definitions/models.Shops'
      User:
        $ref: '#/definitions/models.Users'
  models.Identification_types:
    title: Identification_types
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Code:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      IdentificationTypeId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      Name:
        type: string
  models.Newsletter_customers:
    title: Newsletter_customers
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      CustomerId:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Email:
        type: string
      FirstName:
        type: string
      LastName:
        type: string
      ModifiedBy:
        type: integer
        format: int64
  models.Permissions:
    title: Permissions
    type: object
    properties:
      Action:
        $ref: '#/definitions/models.Actions'
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Permission:
        type: string
      PermissionCode:
        type: string
      PermissionDescription:
        type: string
      PermissionId:
        type: integer
        format: int64
  models.Role_permissions:
    title: Role_permissions
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Permission:
        $ref: '#/definitions/models.Permissions'
      Role:
        $ref: '#/definitions/models.Roles'
      RolePermissionId:
        type: integer
        format: int64
  models.Roles:
    title: Roles
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Description:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Role:
        type: string
      RoleId:
        type: integer
        format: int64
  models.Shops:
    title: Shops
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Email:
        type: string
      Image:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      PhoneNumber:
        type: string
      ShopAssistantName:
        type: string
      ShopAssistantNumber:
        type: string
      ShopDescription:
        type: string
      ShopId:
        type: integer
        format: int64
      ShopName:
        type: string
  models.SignUpDTO:
    title: SignUpDTO
    type: object
    properties:
      Dob:
        type: string
      Email:
        type: string
      Gender:
        type: string
      Name:
        type: string
      Password:
        type: string
      PhoneNumber:
        type: string
      Role:
        type: string
      RoleRequired:
        type: boolean
  models.UpdateCustomerLastTxnRequest:
    title: UpdateCustomerLastTxnRequest
    type: object
  models.UpdateCustomerRequestDTO:
    title: UpdateCustomerRequestDTO
    type: object
  models.UpdateUserBranchRequestDTO:
    title: UpdateUserBranchRequestDTO
    type: object
    properties:
      BranchId:
        type: integer
        format: int64
  models.UpdateUserRequestDTO:
    title: UpdateUserRequestDTO
    type: object
    properties:
      Address:
        type: string
      BranchId:
        type: string
      Dob:
        type: string
      Email:
        type: string
      FullName:
        type: string
      Gender:
        type: string
      ImagePath:
        type: string
      MaritalStatus:
        type: string
      PhoneNumber:
        type: string
      RoleId:
        type: string
      UpdatedBy:
        type: string
      Username:
        type: string
  models.UserCredentialsDTO:
    title: UserCredentialsDTO
    type: object
    properties:
      Password:
        type: string
      Username:
        type: string
  models.UserExtraDetails:
    title: UserExtraDetails
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Branch:
        $ref: '#/definitions/models.Branches'
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Nickname:
        type: string
      Shop:
        $ref: '#/definitions/models.Shops'
      User:
        type: integer
        format: int64
      UserDetailsId:
        type: integer
        format: int64
  models.UserInvites:
    title: UserInvites
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Email:
        type: string
      InvitationToken:
        $ref: '#/definitions/models.UserTokens'
      InvitedBy:
        $ref: '#/definitions/models.Users'
      ModifiedBy:
        type: integer
        format: int64
      Role:
        $ref: '#/definitions/models.Roles'
      Status:
        type: string
      UserInviteId:
        type: integer
        format: int64
  models.UserResponseDTO:
    title: UserResponseDTO
    type: object
  models.UserTokens:
    title: UserTokens
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ExpiryDate:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Nonce:
        type: string
      Token:
        type: string
      UserTokenId:
        type: integer
        format: int64
  models.UserTypes:
    title: UserTypes
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      UserTypeDescription:
        type: string
      UserTypeName:
        type: string
  models.Users:
    title: Users
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Address:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Dob:
        type: string
        format: datetime
      Email:
        type: string
      FullName:
        type: string
      Gender:
        type: string
      IdNumber:
        type: string
      IdType:
        type: string
      ImagePath:
        type: string
      IsVerified:
        type: boolean
      MaritalStatus:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Password:
        type: string
      PhoneNumber:
        type: string
      Role:
        $ref: '#/definitions/models.Roles'
      UserDetails:
        $ref: '#/definitions/models.UserExtraDetails'
      UserId:
        type: integer
        format: int64
      UserType:
        type: integer
        format: int64
      Username:
        type: string
  requests.AddCustomerRequestDTO:
    title: AddCustomerRequestDTO
    type: object
    properties:
      AddedBy:
        type: string
      Branch:
        type: string
      Category:
        type: string
      Dob:
        type: string
      Email:
        type: string
      IdNumber:
        type: string
      IdType:
        type: string
      Location:
        type: string
      Name:
        type: string
      Nickname:
        type: string
      PhoneNumber:
        type: string
  requests.CreateAccountRequestDTO:
    title: CreateAccountRequestDTO
    type: object
    properties:
      UserId:
        type: integer
        format: int64
  requests.NewsletterRequestDTO:
    title: NewsletterRequestDTO
    type: object
    properties:
      Email:
        type: string
      FirstName:
        type: string
      LastName:
        type: string
  requests.PermissionRequest:
    title: PermissionRequest
    type: object
    properties:
      Action:
        type: string
      Description:
        type: string
      Permission:
        type: string
  requests.RegisterInviteRequestDTO:
    title: RegisterInviteRequestDTO
    type: object
    properties:
      Email:
        type: string
      InviteBy:
        type: string
      Links:
        type: array
        items:
          $ref: '#/definitions/requests.string'
      Message:
        type: string
      Role:
        type: string
      Subject:
        type: string
  requests.RolePermissionRequest:
    title: RolePermissionRequest
    type: object
    properties:
      PermissionCode:
        type: string
      Role:
        type: integer
        format: int64
  requests.RolesRequest:
    title: RolesRequest
    type: object
    properties:
      Description:
        type: string
      Role:
        type: string
  requests.ShopRequest:
    title: ShopRequest
    type: object
    properties:
      AssistantName:
        type: string
      AssistantNumber:
        type: string
      Description:
        type: string
      Email:
        type: string
      ImageUrl:
        type: string
      Name:
        type: string
      PhoneNumber:
        type: string
  requests.StringRequestDTO:
    title: StringRequestDTO
    type: object
    properties:
      Value:
        type: string
  requests.UpdateUserInviteRequest:
    title: UpdateUserInviteRequest
    type: object
    properties:
      Status:
        type: string
  requests.string:
    title: string
    type: object
  responses.BranchesResponseDTO:
    title: BranchesResponseDTO
    type: object
    properties:
      Branches:
        $ref: '#/definitions/494.<nil>.0x140008cfb30'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  responses.InviteDecodeResponseDTO:
    title: InviteDecodeResponseDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      Value:
        $ref: '#/definitions/responses.TokenDestructureResponseDTO'
  responses.PermissionResponseDTO:
    title: PermissionResponseDTO
    type: object
    properties:
      Permission:
        $ref: '#/definitions/models.Permissions'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  responses.PermissionsAllResponseDTO:
    title: PermissionsAllResponseDTO
    type: object
    properties:
      Permissions:
        $ref: '#/definitions/2278.<nil>.0x140008cfef0'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  responses.RoleResponseDTO:
    title: RoleResponseDTO
    type: object
    properties:
      Role:
        $ref: '#/definitions/models.Roles'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  responses.RolesAllResponseDTO:
    title: RolesAllResponseDTO
    type: object
    properties:
      Roles:
        $ref: '#/definitions/3081.<nil>.0x14000920120'
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
  responses.StringResponseDTO:
    title: StringResponseDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      Value:
        type: string
  responses.TokenDestructureResponseDTO:
    title: TokenDestructureResponseDTO
    type: object
    properties:
      Email:
        type: string
      RoleId:
        type: string
  responses.UserInviteResponseDTO:
    title: UserInviteResponseDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      UserInvite:
        $ref: '#/definitions/models.UserInvites'
  responses.UserInvitesResponseDTO:
    title: UserInvitesResponseDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      UserInvites:
        $ref: '#/definitions/1380.<nil>.0x140008cfcf8'
  responses.UserResponseDTO:
    title: UserResponseDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      User:
        $ref: '#/definitions/models.Users'
  responses.UsersAllCustomersDTO:
    title: UsersAllCustomersDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      Users:
        $ref: '#/definitions/4454.<nil>.0x14000920360'
tags:
- name: users
  description: |
    UsersController operations for Users
- name: customer-categories
  description: |
    Customer_categoriesController operations for Customer_categories
- name: customers
  description: |
    CustomersController operations for Customers
- name: accounts
  description: |
    AccountsController operations for Accounts
- name: newsletter
  description: |
    Newsletter_customersController operations for Newsletter_customers
- name: shops
  description: |
    ShopsController operations for Shops
- name: roles
  description: |
    RolesController operations for Roles
- name: permissions
  description: |
    PermissionsController operations for Permissions
- name: role-permissions
  description: |
    Role_permissionsController operations for Role_permissions
- name: id-types
  description: |
    Identification_typesController operations for Identification_types
